openapi: 3.0.0
info:
  title: Tasker
  description: MongoDB ExpressJS NodeJS REST API
  version: 1.0.0
servers:
  - url: http://localhost:4000/api/
    description: Localhost 
components:
  securitySchemes:
     bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Projects:
      type: object
      properties:
        name:
          type: string
        backgr_pic:
          type: string
          default: https://newevolutiondesigns.com/images/freebies/rainbow-facebook-cover-1.jpg
        description:
          type: string
        users:
          type: string
        ownerId:
          type: Schema.Types.ObjectId
    
    Users:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string

    UpdateProjects:
      type: object
      properties:
        name:
          type: string
        description:
          type: string 

    UpdateTasks:
      type: object
      properties:
        title:
          type: string
        taskDescription:
          type: string
                    

    Tasks:
      type: object
      properties:
        title:
          type: string
        taskDescription:
          type: string
        projectId:
          type: Schema.Types.ObjectId
        ownerId:
          type: Schema.Types.ObjectId

paths:

  /users/register:
    post:
      summary: Register a new User
      description: Register a new User in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Users"

      responses:
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  _id:
                    type: string

  /users/login:
    post:
      summary: Login user
      description: Login a User in order to get token (Authorization)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      
      responses:
        200:
          description: User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string


  /users/{id}:
    put:
      summary: Updates a user
      description:  Updates a user based on its id.
      security:
        - bearerAuth: []           
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUsers"

      responses:
        201:
          description: User updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projects"                  



  /tasks:
    post:
      summary: New task
      description: New task
      security:
        - bearerAuth: []      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tasks"

      responses:
        201:
          description: Task created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tasks"

  /tasks/{id}:
    get:
      summary: Users tasks
      description: Retrieves all the tasks that belongs to a specific user.
      security:
        - bearerAuth: []  
      parameters:
        - in: path
          name: id
          required: true
          description: Owner id
          schema:
            type: string   
      responses:
        200:
          description: A project in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tasks"
    
    /tasks/projects/{id}/tasks:
    get:
      summary: Specific task
      description: Retrieves a project's tasks.
      security:
        - bearerAuth: []  
      parameters:
        - in: path
          name: id
          required: true
          description: Project id
          schema:
            type: string   
      responses:
        200:
          description: A project in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tasks"

    put:
      summary: Updates a specific task
      description: Updates a specific task based on its id
      security:
        - bearerAuth: []           
      parameters:
        - in: path
          name: id
          required: true
          description: Task id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTasks"

      responses:
        201:
          description: Project updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tasks"

    delete:
      summary: Deletes a specific task
      description: Deletes a specific project based on its id
      security:
        - bearerAuth: []             
      parameters:
        - in: path
          name: id
          required: true
          description: Task id
          schema:
            type: string      

      responses:
        201:
          description: Task deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tasks"

    


                      
              



  
              

  /projects:
    post:
      summary: New project
      description: New project
      security:
        - bearerAuth: []    
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Projects"

      responses:
        201:
          description: Project created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/projects"

  /projects/all/{id}/{email}:
    get:
      summary: All the projects
      description: Retrieves all the projects for a specific user.
      security:
        - bearerAuth: []  
      parameters:
        - in: path
          name: id
          required: true
          description: User id
          schema:
            type: string   
        - in: path
          name: email
          required: true
          description: Owner email
          schema:
            type: string   
      responses:
        200:
          description: A project in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Projects"

  /projects/details/{id}:
    get:
      summary: Specific project
      description: Retrieves projects for a specific project for a user.
      security:
        - bearerAuth: []  
      parameters:
        - in: path
          name: id
          required: true
          description: User id
          schema:
            type: string
      responses:
        200:
          description: A project in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Projects"                        


  /projects/{id}:
    put:
      summary: Updates a specific project
      description: Updates a specific project based on it id
      security:
        - bearerAuth: []           
      parameters:
        - in: path
          name: id
          required: true
          description: Project id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjects"

      responses:
        201:
          description: Project updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projects"


    delete:
      summary: Deletes a specific project
      description: Deletes a specific project based on its id
      security:
        - bearerAuth: []             
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string      

      responses:
        201:
          description: Projects deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projects"







    
  