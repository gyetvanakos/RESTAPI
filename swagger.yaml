openapi: 3.0.0
info:
  title: Fake trello
  description: MongoDB ExpressJS NodeJS REST API
  version: 1.0.0
servers:
  - url: http://localhost:4000/api/
    description: Localhost 
components:
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: auth-token

  schemas:
    Projects:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        backgr_pic:
          type: string
        description:
          type: string
        date:
          type: Date
        tasks:
          type: Schema.Types.ObjectId
    
    User:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: boolean
        avatar:
          type: string
        date:
          type: string

    Tasks:
      type: object
      properties:
        id:
          type: string
        task:
          type: string
        taskDescription:
          type: string
        status:
          type: Boolean
        project:
          type: Schema.Types.ObjectId
        owner:
          type: Schema.Types.ObjectId

paths:

  /user/register:
    post:
      summary: Register a new User
      description: Register a new User in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  _id:
                    type: string

  /user/login:
    post:
      summary: Login a User
      description: Login a User in order to get JWT token (auth-token)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      
      responses:
        200:
          description: User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string




  /projects:
    get:
      summary: Retrieves a list of projects
      description: Retrieves a list of projects as JSON objects.
      responses:
        200:
          description: A list of projects JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/projects"
    
    post:
      summary: New project
      description: New project
      security:
        - ApiKeyAuth: []      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Projects"

      responses:
        201:
          description: Project created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/projects"
  
  /projects/{id}:
    get:
      summary: Specific project
      description: Retrieves a specific project based on its id.
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: A project in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Projects"
    
    /tasks/{id}:
    get:
      summary: Specific task
      description: Retrieves a task project based on its id.
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      responses:
        200:
          description: A task in the format of a JSON object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tasks"
   
    put:
      summary: Updates a specific project
      description: Updates a specific project based on it id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Projects"

      responses:
        201:
          description: Project updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projects"

      put:
      summary: Updates a specific task
      description: Updates a specific task based on its id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tasks"

        responses:
        201:
          description: Task updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tasks"

    delete:
      summary: Deletes a specific project
      description: Deletes a specific project based on it id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string      

      responses:
        201:
          description: Projects deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projects"


    delete:
      summary: Deletes a specific task
      description: Deletes a specific task based on it id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string      

      responses:
        201:
          description: Projects deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tasks"